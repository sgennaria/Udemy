train = subset(df, sample==TRUE)
test = subset(df, sample==FALSE)
model <- lm(G3 ~ .,train)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(corrgram)
library(corrplot)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
G3.predictions <- predict(model, test)
results <- cbind(G3.predictions, test$G3)
colnames(results) <- c('predicted', 'actual')
results <- as.data.frame(results)
head(results)
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
head(sort(results))
head(sort(results$predicted))
min(results)
results$pred <- sapply(results$predicted, to_zero)
min(results) # this is negative, which is unrealstic for test scores
head(results)
G3.predictions <- predict(model, test)
results <- cbind(G3.predictions, test$G3)
colnames(results) <- c('predicted', 'actual')
results <- as.data.frame(results)
head(results)
min(results) # this is negative, which is unrealstic for test scores
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
results$predicted <- sapply(results$predicted, to_zero)
min(results) # this is negative, which is unrealstic for test scores
mse <- mean((results$actual-results$predicted)^2)
mse # mean squared error
mse^0.5 # root mean squared error
SSE = sum((results$predicted - results$actual)^2)
SST = sum((mean(df$G3) - results$actual)^2)
R2 = 1 - SSE/SST
R2 # R-Squared Value of model predictions
getwd()
path <- 'C:\Users\sgenn_000\Documents\GitHub\Udemy\Data Science and Machine Learning Bootcamp with R'
path <- 'C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R'
setwd(path)
getwd()
getwd()
df <- read.csv('/Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv',sep=';')
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv',sep=';')
head(df)
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
head(df)
bike <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
ggplot(bike, aes(x = temp, y = count)) + geom_points()
ggplot(bike, aes(x = temp, y = count)) + geom_point()
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
library(ggplot2)
library(ggthemes)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
df <- fread("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Capstone and Data Viz Projects/Data Visualization Project/Economist_Assignment_Data.csv", drop=1)
library(data.table)
df <- fread("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Capstone and Data Viz Projects/Data Visualization Project/Economist_Assignment_Data.csv", drop=1)
head(df)
pl <- ggplot(df, aes(x=CPI, y=HDI)) + geom_point(aes(color=Region))
pl
pl <- ggplot(df, aes(x=CPI, y=HDI)) + geom_point(aes(color=Region), shape=1, size=5)
pl2 <- pl + geom_smooth(aes(group=1))
pl2 <- pl + geom_smooth(aes(group=1), method='lm', formula=y ~ log(x), se=FALSE, color='red')
pl2 + geom_text(aes(label=Country)) # too many!
pointsToLabel <- c("Russia", "Venezuela", "Iraq", "Myanmar", "Sudan",
"Afghanistan", "Congo", "Greece", "Argentina", "Brazil",
"India", "Italy", "China", "South Africa", "Spane",
"Botswana", "Cape Verde", "Bhutan", "Rwanda", "France",
"United States", "Germany", "Britain", "Barbados", "Norway", "Japan",
"New Zealand", "Singapore")
pl3 <- pl2 + geom_text(aes(label = Country), color = "gray20",
data = subset(df, Country %in% pointsToLabel),check_overlap = TRUE)
pl4 <- pl3 + theme_bw()
pl5 <- pl4 + scale_x_continuous(name="Corruption Perceptions Index, 2011 (10=least corrupt)", limits=c(1,10), breaks=1:10)
pl6 <- pl5 + scale_y_continuous(name="Human Development Index, 2011 (1=best)", limits=c(0.2,1.0), breaks=seq(0.2,1.0,0.1))
pl6 + ggtitle('Corruption and human development')
pl6
dev.off()
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.5)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=factor(temp)), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_x_datetime()
p
str(bike)
bike2 <- bike
bike2$datetime <- as.POSIXct(bike$datetime)
str(bike)
str(bike2)
head(bike2)
head(bike2)
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
bike <- df
head(bike)
str(bike)
library(ggplot2)
library(ggthemes)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
str(bike)
bike$datetime <- as.POSIXct(df$datetime)
str(bike)
head(bike)
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point() + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp)) + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp)) + scale_x_datetime()
p
p <- p + scale_color_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='sky blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='light blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='aqua') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='cyan') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='red', low='cyan') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
p
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orange', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='tomato', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
any(is.na(df))
any(is.null(df))
library(corrgram)
corrgram(bike, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
summary(bike)
model <- lm(count ~ temp, bike)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
num.cols <- sapply(bike, is.numeric)
cor.data <- cor(df[,num.cols])
cor.data
str(bike)
cor.data <- cor(df[c(6,12),num.cols])
cor.data
cor.data <- cor(df[,c(6,12)])
cor.data
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot()
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot(aes(color = factor(season)))
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot(aes(color = factor(season))) + theme_minimal()
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
bike$hour <- format(bike$datetime, "%H")
str(bike)
head(bike)
head(bike[workingday==1])
head(bike[,workingday==1])
head(bike[,bike$workingday==1])
head(bike[bike$workingday==1])
head(bike[bike$workingday==1],)
bike$workingday==1
bike[bike$workingday==1]
bike[6]
bike[6,]
bike[bike$workingday==1,]
head(bike[bike$workingday==1,])
ggplot(bike, aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('red', 'yellow', 'blue')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'light blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'light blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = 'jitter') + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orangered', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
temp.model <- lm(count ~ temp, bike)
summary(temp.model)
temp.predictions <- predict(temp.model, bike)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$count)
temp.results <- as.data.frame(temp.results)
head(temp.results)
colnames(temp.results) <- c('predicted', 'actual')
head(temp.results)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$temp)
colnames(temp.results) <- c('predicted', 'temp')
temp.results <- as.data.frame(temp.results)
head(temp.results)
ggplot(temp.results, aes(x = temp, y = predicted)) + geom_point() + theme_minimal()
temp.results
sort(temp.results, temp)
sort(temp.results, temp.results$temp)
sort(temp.results$temp)
temp.results[temp.results$temp==25, ]
temp.results[round(temp.results$temp)==25, ]
mean(temp.results[round(temp.results$temp)==25, ])
mean(temp.results$predicted[round(temp.results$temp)==25, ])
mean(temp.results[round(temp.results$temp)==25, ]$predicted)
str(bike)
bike$hour <- as.numeric(bike$hour)
str(bike)
library(corrgram)
corrgram(bike, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
complex.model <- lm(count ~ season + holiday + workingday + weather + temp + humidity + windspeed + factor(hour), bike)
summary(complex.model)
complex.model <- lm(count ~ season + holiday + workingday + weather + temp + humidity + windspeed + hour, bike)
summary(complex.model)
ggplot(bike, aes(temp, count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(datetime, count)) + geom_point(aes(color=temp), alpha = 0.5) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
cor(bike[,c('temp', 'count')])
ggplot(bike, aes(factor(season), count)) + geom_boxplot(aes(color = factor(season))) + theme_minimal()
library(dplyer)
library(dplyr)
library(dplyr)
pl <- ggplot(filter(bike, workingday==1), aes(hour, count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0), aes(color=temp), alpha=0.5)
pl <- pl + scale_color_gradientn(colors=c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red'))
pl + theme_minimal()
pl <- ggplot(filter(bike, workingday==0), aes(hour, count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0), aes(color=temp), alpha=0.5)
pl <- pl + scale_color_gradientn(colors=c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red'))
pl + theme_minimal()
temp.model <- lm(count ~ temp, bike)
summary(temp.model)
6.0462 + (9.1705 * 25)
temp.test <- data.frame(temp=c(25))
str(temp.test)
temp.test <- data.frame(temp=25)
str(temp.test)
predict(temp.model,temp.test)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$temp)
colnames(temp.results) <- c('predicted', 'temp')
temp.results <- as.data.frame(temp.results)
mean(temp.results[round(temp.results$temp)==25, ]$predicted)
complex.model <- lm(count ~ . -casual -registered -datetime -atemp, bike)
summary(complex.model)
install.packages('rpart')
library(rpart)
str(kyphosis)
head(kyphosis)
tree <- rpart(Kyphosis ~ ., method='class', data=kyphosis)
printcp(tree)
plot(tree, uniform=TRUE, main='Kyphosis Tree')
text(tree, use.n=TRUE, all=TRUE)
install.packages('rpart.plot')
library(rpart.plot)
prp(tree)
install.packages('randomForest')
library(randomForest)
rf.model <- randomForest(Kyphosis ~ ., data=kyphosis)
print(rf.model)
rf.model$ntree
rf.model$confusion
library(ISLR)
str(College)
head(College)
data(College)
str(College)
head(College)
data()
library(ggplot2)
ggplot(College, aes(Room.Board, Grad.Rate)) + geom_point(aes(col=Private))
str(College)
ggplot(College, aes(F.Undergrad)) + geom_histogram(aes(col=Private))
ggplot(College, aes(F.Undergrad)) + geom_histogram(aes(fill=Private))
ggplot(College, aes(F.Undergrad)) + geom_histogram(aes(col='black', fill=Private))
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private))
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private). binwidth=1)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=1)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=16)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=150)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=1500)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=500)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=1000)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=750)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=600)
ggplot(College, aes(F.Undergrad)) + geom_histogram(col='black', aes(fill=Private), binwidth=650)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=650)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=2)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=3)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=2)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=2.5)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=2)
ggplot(College, aes(Grad.Rate)) + geom_histogram(col='black', aes(fill=Private), binwidth=2.5)
library(dplyr)
College %>% filter(Grad.Rate > 100)
College[Grad.Rate > 100,]
College['Grad.Rate' > 100,]
College[College$Grad.Rate > 100,]
College[College$Grad.Rate > 100,]$Grad.Rate
College[College$Grad.Rate > 100,]$Grad.Rate <- 100
College[College$Grad.Rate > 100,]
library(caTools)
str(College)
set.seed(101)
split <- sample.split(College$Private, SplitRatio = 0.7)
train <- subset(College, split==TRUE)
test <- subset(College, split==FALSE)
str(train)
str(test)
library(rpart)
tree <- rpart(Private ~ ., method='class', data=train)
fitted.probabilities <- predict(tree, test, type='response')
fitted.probabilities <- predict(tree, test)
fitted.probabilities <- predict(tree, test, type='response')
fitted.probabilities <- predict(tree, test)
fitted.results <- ifelse(fitted.probabilities>0.5, 1, 0)
misClassError <- mean(fitted.results != final.test$Private)
misClassError <- mean(fitted.results != test$Survived)
1-misClassError
head(fitted.probabilities)
fitted.results <- ifelse(fitted.probabilities>0.5, 1, 0)
str(College)
str(fitted.results)
head(fitted.results)
tree.preds <- predict(tree, test)
head(tree.preds)
pred.results <- ifelse(tree.preds>0.5, 1, 0)
str(pred.results)
head(pred.results)
tree.preds$Private <- ifelse(pred.results==1, 'Yes', 'No')
head(tree.preds)
tree.preds <- predict(tree, test)
head(tree.preds)
pred.results <- ifelse(tree.preds>0.5, 1, 0)
str(pred.results)
head(pred.results)
pred.results$Private <- ifelse(Yes==1, 'Yes', 'No')
pred.results$Private <- ifelse(pred.results$Yes==1, 'Yes', 'No')
typeof(pred.results)
typeof(tree.preds)
tree.preds <- as.data.frame(tree.preds)
tree.preds$Private <- ifelse(pred.results==1, 'Yes', 'No')
head(tree.preds)
tree.preds <- predict(tree, test)
tree.preds <- as.data.frame(tree.preds)
tree.preds$Private <- ifelse(pred.results$Yes==1, 'Yes', 'No')
pred.results <- as.data.frame(pred.results)
pred.results$Private <- ifelse(Yes==1, 'Yes', 'No')
pred.results$Private <- ifelse(pred.results$Yes==1, 'Yes', 'No')
head(pred.results)
head(tree.preds)
tree.preds$Private <- ifelse(pred.results$Yes==1, 'Yes', 'No')
head(tree.preds)
table(tree.preds$Private, test$Private)
library(rpart.plot)
prp(tree)
library(randomForest)
rf.model <- randomForest(Private ~ ., data=train, importance=TRUE)
rf.model$confusion
rf.model$importance
rf.preds <- predict(rf.model, test)
str(rf.preds)
head(rf.preds)
table(rf.preds$Private, test$Private)
rf.preds <- as.data.frame(rf.preds)
table(rf.preds$Private, test$Private)
rf.preds <- predict(rf.model, test)
rf.pred.results <- ifelse(rf.preds>0.5, 1, 0)
rf.preds <- predict(rf.model, test)
head(rf.preds)
table(rf.preds, test$Private)
table(tree.preds$Private, test$Private)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
paste0('Accuracy: ', accuracy)
paste0('Error Rate: ', error.rate)
paste0('Recall: ', recall)
paste0('Precision: ', precision)
}
cm.report(cm1)
cm1 <- table(rf.preds, test$Private)
cm2 <- table(tree.preds$Private, test$Private)
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
cat(paste0('Accuracy: ', accuracy)
paste0('Error Rate: ', error.rate)
paste0('Recall: ', recall)
paste0('Precision: ', precision))
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
paste0('Accuracy: ', accuracy, '
Error Rate: ', error.rate, '
Recall: ', recall, '
Precision: ', precision)
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
cat('Accuracy: ', accuracy, '
Error Rate: ', error.rate, '
Recall: ', recall, '
Precision: ', precision)
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
cat('Accuracy: ', accuracy)
cat('Error Rate: ', error.rate)
cat('Recall: ', recall)
cat('Precision: ', precision))
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
cat('Accuracy: ', accuracy)
cat('Error Rate: ', error.rate)
cat('Recall: ', recall)
cat('Precision: ', precision)
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
paste0('Accuracy: ', accuracy, '
Error Rate: ', error.rate, '
Recall: ', recall, '
Precision: ', precision)
}
cm.report(cm1)
cm.report <- function(cm) {
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
cat('Accuracy: ', accuracy, '
Error Rate: ', error.rate, '
Recall: ', recall, '
Precision: ', precision)
}
cm.report(cm1)
cm.report(cm2)
rf.cm <- table(rf.preds, test$Private)
tree.cm <- table(tree.preds$Private, test$Private)
cm.report(rf.cm)
cm.report(tree.cm)
