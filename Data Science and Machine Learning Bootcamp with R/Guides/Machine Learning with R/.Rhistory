)
ufcombo3$total_salary <- ufcombo3$salary_a + ufcombo3$salary_b + ufcombo3$salary_c
ufcombo3$total_AB <- ufcombo3$AB_a + ufcombo3$AB_b + ufcombo3$AB_c
ufcombo3$mean_OBP <- mean(c(ufcombo3$OBP_a, ufcombo3$OBP_b, ufcombo3$OBP_c))
ufcombo3$total_salary <- ufcombo3$salary_a + ufcombo3$salary_b + ufcombo3$salary_c
ufcombo3$total_AB <- ufcombo3$ab_a + ufcombo3$ab_b + ufcombo3$ab_c
ufcombo3$mean_OBP <- mean(c(ufcombo3$obp_a, ufcombo3$obp_b, ufcombo3$obp_c))
head(ufcombo3)
maxsal
minAB
minOBP
ufcombo3 %>% filter(
(playerid_a=='heltoto01' & playerid_b=='berkmla01' & playerid_c=='gonzalu01') |
(playerid_a=='heltoto01' & playerid_b=='gonzalu01' & playerid_c=='berkmla01') |
(playerid_a=='berkmla01' & playerid_b=='heltoto01' & playerid_c=='gonzalu01') |
(playerid_a=='berkmla01' & playerid_b=='gonzalu01' & playerid_c=='heltoto01') |
(playerid_a=='gonzalu01' & playerid_b=='heltoto01' & playerid_c=='berkmla01') |
(playerid_a=='gonzalu01' & playerid_b=='berkmla01' & playerid_c=='heltoto01')
)
head(ufcombo3 %>% arrange(total_salary))
head(ufcombo3 %>% arrange(total_salary, desc(mean_OBP))) # sort by what you want
head(ufcombo3 %>% arrange(total_salary, desc(mean_OBP), desc(total_AB))) # sort by what you want
head(ufcombo3 %>% arrange(desc(mean_OBP), desc(total_AB), total_salary)) # sort by what you want
head(ufcombo3 %>% arrange(desc(total_AB), desc(mean_OBP), total_salary)) # sort by what you want
nrow(fcombo3) # 330906
testfcombo3 <- sqldf(paste0("
SELECT
DISTINCT ON(playerid_a, playerid_b, c.playerid)
playerid_a
,salary_a
,ab_a
,obp_a
,playerid_b
,salary_b
,ab_b
,obp_b
,c.playerid AS playerid_c
,c.salary AS salary_c
,c.ab AS ab_c
,c.obp AS obp_c
FROM
ufcombo2 AS a
INNER JOIN
fcombo AS c
ON
playerid_a <> c.playerid
AND playerid_b <> c.playerid
WHERE
(salary_a + salary_b + c.salary) <= ", maxsal, "
AND (ab_a + ab_b + c.ab) >= ", minAB, "
AND ((obp_a + obp_b + c.obp) / 3) >= ", minOBP, "
"))
nrow(testcombo3)
nrow(testfcombo3)
df <- read.csv('student-mat.csv',sep=';')
View(ufcombo22)
df <- read.csv('C:\\Users\\sgenn_000\\Documents\\GitHub\\Udemy\\Data Science and Machine Learning Bootcamp with R\\Guides\\Machine Learning with R\\student-mat.csv',sep=';')
str(df)
df
head(df)
summary(df)
any(is.na(df))
any(is.null(df))
str(df)
library(ggplot2)
library(ggthemes)
library(dplyr)
num.cols <- sapply(df, is.numeric)
num.cols
cor.data <- cor(df[,num.cols])
cor.data
install.packages('corrgram')
install.packages('corrplot')
library(corrgram)
library(corrplot)
corrplot(cor.data, method='color')
corrplot(cor.data, method='color')
corrgram(df, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
ggplot(df, aes(x=G3)) + geom_histogram(bins=20, alpha=0.5, fill='blue') + theme_minimal()
library(caTools)
set.seed(101)
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample==TRUE)
test = subset(df, sample==FALSE)
model <- lm(G3 ~ .,train)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
G3.predictions <- predict(model, test)
results <- cbind(G3.predictions, test$G3)
colnames(results) <- c('pred', 'real')
results <- as.data.frame(results)
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
results$pred <- sapply(results$pred, to_zero)
mse <- mean((results$real-results$pred)^2)
mse
mse^0.5
SSE = sum((results$pred - results$real)^2)
SST = sum((mean(df$G3) - results$real)^2)
R2 = 1 - SSE/SST
R2
df <- read.csv('C:\\Users\\sgenn_000\\Documents\\GitHub\\Udemy\\Data Science and Machine Learning Bootcamp with R\\Guides\\Machine Learning with R\\student-mat.csv',sep=';')
head(df)
summary(df)
any(is.na(df))
any(is.null(df))
str(df)
library(ggplot2)
library(ggthemes)
library(dplyr)
#grab only numeric columns
num.cols <- sapply(df, is.numeric)
#filter to numeric columns for correlation
cor.data <- cor(df[,num.cols])
cor.data
install.packages('corrgram')
install.packages('corrplot')
library(corrgram)
library(corrplot)
corrplot(cor.data, method='color')
corrgram(df, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
ggplot(df, aes(x=G3)) + geom_histogram(bins=20, alpha=0.5, fill='blue') + theme_minimal()
library(caTools)
set.seed(101)
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample==TRUE)
test = subset(df, sample==FALSE)
model <- lm(G3 ~ .,train)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
colnames(results) <- c('pred', 'real')
results <- as.data.frame(results)
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
results$pred <- sapply(results$pred, to_zero)
mse <- mean((results$real-results$pred)^2)
mse # mean squared error
mse^0.5 # root mean squared error
SSE = sum((results$pred - results$real)^2)
SST = sum((mean(df$G3) - results$real)^2)
R2 = 1 - SSE/SST
R2 # R-Squared Value of model predictions
head(df)
head(df)
head(df)
head(df)
head(df)
summary(df)
any(is.na(df))
any(is.null(df))
str(df)
corrplot(cor.data, method='color')
corrplot(cor.data, method='color')
corrgram(df, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
ggplot(df, aes(x=G3)) + geom_histogram(bins=20, alpha=0.5, fill='blue') + theme_minimal()
library(caTools)
sample <- sample.split(df$G3, SplitRatio = 0.70)
set.seed(101)
sample <- sample.split(df$G3, SplitRatio = 0.70)
train = subset(df, sample==TRUE)
test = subset(df, sample==FALSE)
model <- lm(G3 ~ .,train)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(corrgram)
library(corrplot)
ggplot(res, aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
G3.predictions <- predict(model, test)
results <- cbind(G3.predictions, test$G3)
colnames(results) <- c('predicted', 'actual')
results <- as.data.frame(results)
head(results)
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
head(sort(results))
head(sort(results$predicted))
min(results)
results$pred <- sapply(results$predicted, to_zero)
min(results) # this is negative, which is unrealstic for test scores
head(results)
G3.predictions <- predict(model, test)
results <- cbind(G3.predictions, test$G3)
colnames(results) <- c('predicted', 'actual')
results <- as.data.frame(results)
head(results)
min(results) # this is negative, which is unrealstic for test scores
to_zero <- function(x) {
if (x < 0){
return(0)
}else{
return(x)
}
}
results$predicted <- sapply(results$predicted, to_zero)
min(results) # this is negative, which is unrealstic for test scores
mse <- mean((results$actual-results$predicted)^2)
mse # mean squared error
mse^0.5 # root mean squared error
SSE = sum((results$predicted - results$actual)^2)
SST = sum((mean(df$G3) - results$actual)^2)
R2 = 1 - SSE/SST
R2 # R-Squared Value of model predictions
getwd()
path <- 'C:\Users\sgenn_000\Documents\GitHub\Udemy\Data Science and Machine Learning Bootcamp with R'
path <- 'C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R'
setwd(path)
getwd()
getwd()
df <- read.csv('/Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv',sep=';')
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv',sep=';')
head(df)
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
head(df)
bike <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
head(bike)
ggplot(bike, aes(x = temp, y = count)) + geom_points()
ggplot(bike, aes(x = temp, y = count)) + geom_point()
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
library(ggplot2)
library(ggthemes)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
df <- fread("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Capstone and Data Viz Projects/Data Visualization Project/Economist_Assignment_Data.csv", drop=1)
library(data.table)
df <- fread("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Capstone and Data Viz Projects/Data Visualization Project/Economist_Assignment_Data.csv", drop=1)
head(df)
pl <- ggplot(df, aes(x=CPI, y=HDI)) + geom_point(aes(color=Region))
pl
pl <- ggplot(df, aes(x=CPI, y=HDI)) + geom_point(aes(color=Region), shape=1, size=5)
pl2 <- pl + geom_smooth(aes(group=1))
pl2 <- pl + geom_smooth(aes(group=1), method='lm', formula=y ~ log(x), se=FALSE, color='red')
pl2 + geom_text(aes(label=Country)) # too many!
pointsToLabel <- c("Russia", "Venezuela", "Iraq", "Myanmar", "Sudan",
"Afghanistan", "Congo", "Greece", "Argentina", "Brazil",
"India", "Italy", "China", "South Africa", "Spane",
"Botswana", "Cape Verde", "Bhutan", "Rwanda", "France",
"United States", "Germany", "Britain", "Barbados", "Norway", "Japan",
"New Zealand", "Singapore")
pl3 <- pl2 + geom_text(aes(label = Country), color = "gray20",
data = subset(df, Country %in% pointsToLabel),check_overlap = TRUE)
pl4 <- pl3 + theme_bw()
pl5 <- pl4 + scale_x_continuous(name="Corruption Perceptions Index, 2011 (10=least corrupt)", limits=c(1,10), breaks=1:10)
pl6 <- pl5 + scale_y_continuous(name="Human Development Index, 2011 (1=best)", limits=c(0.2,1.0), breaks=seq(0.2,1.0,0.1))
pl6 + ggtitle('Corruption and human development')
pl6
dev.off()
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp))
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.5)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=factor(temp)), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_x_datetime()
p
str(bike)
bike2 <- bike
bike2$datetime <- as.POSIXct(bike$datetime)
str(bike)
str(bike2)
head(bike2)
head(bike2)
df <- read.csv('./Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects/bikeshare.csv')
bike <- df
head(bike)
str(bike)
library(ggplot2)
library(ggthemes)
ggplot(bike, aes(x = temp, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
str(bike)
bike$datetime <- as.POSIXct(df$datetime)
str(bike)
head(bike)
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(fill=temp), alpha = 0.2) + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point() + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp)) + scale_x_datetime()
p
p <- p + scale_fill_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp)) + scale_x_datetime()
p
p <- p + scale_color_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='sky blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='light blue') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='aqua') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orange', low='cyan') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='red', low='cyan') + theme_minimal()
p
p <- ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
p
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.2) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orange', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='tomato', low='cyan') + theme_minimal()
ggplot(bike, aes(x = datetime, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
any(is.na(df))
any(is.null(df))
library(corrgram)
corrgram(bike, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
summary(bike)
model <- lm(count ~ temp, bike)
summary(model)
res <- residuals(model)
res <- as.data.frame(res)
head(res)
num.cols <- sapply(bike, is.numeric)
cor.data <- cor(df[,num.cols])
cor.data
str(bike)
cor.data <- cor(df[c(6,12),num.cols])
cor.data
cor.data <- cor(df[,c(6,12)])
cor.data
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot()
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot(aes(color = factor(season)))
ggplot(bike, aes(x = factor(season), y = count)) + geom_boxplot(aes(color = factor(season))) + theme_minimal()
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
bike$hour <- format(bike$datetime, "%H")
str(bike)
head(bike)
head(bike[workingday==1])
head(bike[,workingday==1])
head(bike[,bike$workingday==1])
head(bike[bike$workingday==1])
head(bike[bike$workingday==1],)
bike$workingday==1
bike[bike$workingday==1]
bike[6]
bike[6,]
bike[bike$workingday==1,]
head(bike[bike$workingday==1,])
ggplot(bike, aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('red', 'yellow', 'blue')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'light blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('blue', 'light blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = 'jitter') + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orangered', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==1,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
ggplot(bike[bike$workingday==0,], aes(x = hour, y = count)) + geom_point(aes(color=temp), alpha = 0.4, position = position_jitter(w=1, h=0)) + scale_color_gradientn(colors = c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red')) + theme_minimal()
temp.model <- lm(count ~ temp, bike)
summary(temp.model)
temp.predictions <- predict(temp.model, bike)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$count)
temp.results <- as.data.frame(temp.results)
head(temp.results)
colnames(temp.results) <- c('predicted', 'actual')
head(temp.results)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$temp)
colnames(temp.results) <- c('predicted', 'temp')
temp.results <- as.data.frame(temp.results)
head(temp.results)
ggplot(temp.results, aes(x = temp, y = predicted)) + geom_point() + theme_minimal()
temp.results
sort(temp.results, temp)
sort(temp.results, temp.results$temp)
sort(temp.results$temp)
temp.results[temp.results$temp==25, ]
temp.results[round(temp.results$temp)==25, ]
mean(temp.results[round(temp.results$temp)==25, ])
mean(temp.results$predicted[round(temp.results$temp)==25, ])
mean(temp.results[round(temp.results$temp)==25, ]$predicted)
str(bike)
bike$hour <- as.numeric(bike$hour)
str(bike)
library(corrgram)
corrgram(bike, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt)
complex.model <- lm(count ~ season + holiday + workingday + weather + temp + humidity + windspeed + factor(hour), bike)
summary(complex.model)
complex.model <- lm(count ~ season + holiday + workingday + weather + temp + humidity + windspeed + hour, bike)
summary(complex.model)
ggplot(bike, aes(temp, count)) + geom_point(aes(color=temp), alpha = 0.2) + theme_minimal()
ggplot(bike, aes(datetime, count)) + geom_point(aes(color=temp), alpha = 0.5) + scale_x_datetime() + scale_color_gradient(high='orangered', low='cyan') + theme_minimal()
cor(bike[,c('temp', 'count')])
ggplot(bike, aes(factor(season), count)) + geom_boxplot(aes(color = factor(season))) + theme_minimal()
library(dplyer)
library(dplyr)
library(dplyr)
pl <- ggplot(filter(bike, workingday==1), aes(hour, count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0), aes(color=temp), alpha=0.5)
pl <- pl + scale_color_gradientn(colors=c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red'))
pl + theme_minimal()
pl <- ggplot(filter(bike, workingday==0), aes(hour, count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0), aes(color=temp), alpha=0.5)
pl <- pl + scale_color_gradientn(colors=c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red'))
pl + theme_minimal()
temp.model <- lm(count ~ temp, bike)
summary(temp.model)
6.0462 + (9.1705 * 25)
temp.test <- data.frame(temp=c(25))
str(temp.test)
temp.test <- data.frame(temp=25)
str(temp.test)
predict(temp.model,temp.test)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$temp)
colnames(temp.results) <- c('predicted', 'temp')
temp.results <- as.data.frame(temp.results)
mean(temp.results[round(temp.results$temp)==25, ]$predicted)
complex.model <- lm(count ~ . -casual -registered -datetime -atemp, bike)
summary(complex.model)
getwd()
setwd("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Machine Learning with R")
getwd()
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
head(df.train)
str(df.train)
install.packages("Amelia")
library(Amelia)
missmap(df.train, main='Missing Map', col=c('yellow',  'black'), legend=FALSE)
head(df.train)
str(df.train)
missmap(df.train, main='Missing Map', col=c('yellow',  'black'), legend=FALSE)
library(ggplot2)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill=factor(Pclass)))
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill=factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins=20, alpha=0.5, fill='blue')
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram()
ggplot(df.train, aes(Fare)) + geom_histogram(fill='green', col='black')
ggplot(df.train, aes(Fare)) + geom_histogram(fill='green', col='black', alpha=0.5)
pl <- ggplot(df.train, aes(Pclass,Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
impute_age <- function(age, class) {
out <- age
for(i in 1:length(age)){
if(is.na(age[i])){
if(class[i] == 1){
out[i] <- 37
}else if(class[i] == 2){
out[i] <- 29
}else{
out[i] <- 24
}
}else{
out[i]  <- age[i]
}
}
return(out)
}
fixed.ages <- impute_age(df.train$Age, df.train$Pclass)
