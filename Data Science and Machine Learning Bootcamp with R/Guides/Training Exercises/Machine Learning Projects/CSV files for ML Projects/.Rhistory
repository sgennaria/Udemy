pl + theme_minimal()
pl <- ggplot(filter(bike, workingday==0), aes(hour, count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0), aes(color=temp), alpha=0.5)
pl <- pl + scale_color_gradientn(colors=c('dark blue', 'blue', 'light blue', 'light green', 'yellow', 'orange', 'red'))
pl + theme_minimal()
temp.model <- lm(count ~ temp, bike)
summary(temp.model)
6.0462 + (9.1705 * 25)
temp.test <- data.frame(temp=c(25))
str(temp.test)
temp.test <- data.frame(temp=25)
str(temp.test)
predict(temp.model,temp.test)
temp.predictions <- predict(temp.model, bike)
temp.results <- cbind(temp.predictions, bike$temp)
colnames(temp.results) <- c('predicted', 'temp')
temp.results <- as.data.frame(temp.results)
mean(temp.results[round(temp.results$temp)==25, ]$predicted)
complex.model <- lm(count ~ . -casual -registered -datetime -atemp, bike)
summary(complex.model)
adult <- read.csv('adult_sal.csv')
setwd("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects")
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$marital)
table(adult$country)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="Latin.and.South.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
str(adult)
levels(adult$type_employer)
levels(adult$marital)
levels(adult$country)
library(Amelia)
sapply(adult,function(x) sum(x=='?'))
table(adult$type_employer)
adult %>% filter(type_employer=='?')
adult[adult$type_employer=='?', 'type_employer'] <- NA
adult %>% filter(is.na(type_employer)) # verification
table(adult$type_employer)
table(adult$occupation)
adult %>% filter(occupation=='?')
adult[adult$occupation=='?', 'occupation'] <- NA
adult %>% filter(is.na(occupation)) # verification
table(adult$occupation)
adult$type_employer <- factor(adult$type_employer)
adult$occupation <- factor(adult$occupation)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
adult <- na.omit(adult)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
str(adult)
library(ggplot2)
ggplot(adult, aes(age)) + geom_histogram(bins=70, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=100, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=55, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(aes(fill=income), col='black')
ggplot(adult, aes(age)) + geom_histogram(aes(fill=income), col='black', binwidth=1)
ggplot(adult, aes(age)) + geom_histogram(aes(fill=income), col='black', binwidth=1) + theme_bw()
summary(adult)
str(adult)
ggplot(adult, aes(hr_per_week)) + geom_histogram() + theme_bw()
colnames(adult)
colnames(adult)[14]
colnames(adult)[14] <- 'region'
colnames(adult)
ggplot(adult, aes(region)) + geom_bar(aes(fill=income)) + theme_bw()
ggplot(adult, aes(region)) + geom_bar(stat='identity', aes(fill=income)) + theme_bw()
ggplot(adult, aes(region)) + geom_histogram(aes(fill=income)) + theme_bw()
ggplot(adult, aes(region)) + geom_bar(stat='count', aes(fill=income)) + theme_bw()
unique(adult$region)
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$marital)
table(adult$country)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="Latin.and.South.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
library(plyr)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
adult <- read.csv('adult_sal.csv')
head(adult)
library(plyr)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$marital)
table(adult$country)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="Latin.and.South.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
str(adult)
levels(adult$type_employer)
levels(adult$marital)
levels(adult$country)
library(Amelia)
sapply(adult,function(x) sum(x=='?'))
table(adult$type_employer)
adult %>% filter(type_employer=='?')
adult[adult$type_employer=='?', 'type_employer'] <- NA
adult %>% filter(is.na(type_employer)) # verification
table(adult$type_employer)
table(adult$occupation)
adult %>% filter(occupation=='?')
adult[adult$occupation=='?', 'occupation'] <- NA
adult %>% filter(is.na(occupation)) # verification
table(adult$occupation)
adult$type_employer <- factor(adult$type_employer)
adult$occupation <- factor(adult$occupation)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
adult <- na.omit(adult)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
str(adult)
library(ggplot2)
ggplot(adult, aes(age)) + geom_histogram(aes(fill=income), col='black', binwidth=1) + theme_bw()
ggplot(adult, aes(hr_per_week)) + geom_histogram() + theme_bw()
colnames(adult)
colnames(adult)[14] <- 'region'
colnames(adult)
ggplot(adult, aes(region)) + geom_bar(stat='count', aes(fill=income)) + theme_bw()
ggplot(adult, aes(region)) + geom_bar(aes(fill=income), col='black') + theme_bw()
ggplot(adult, aes(region)) + geom_bar(stat='count', aes(fill=income), col='black') + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(adult, aes(region)) + geom_bar(aes(fill=income), col='black') + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
head(adult)
library(caTools)
set.seed(101)
split <- sample.split(adult$income, SplitRatio = 0.7)
adult.train <- subset(adult, split==TRUE)
adult.test <- subset(adult, split==FALSE)
str(adult.train)
str(adult.test)
log.model <- glm(income ~ . , family=binomial(logit), data=adult.train)
log.model <- glm(income ~ . , family=binomial(link='logit'), data=adult.train)
log.model <- glm(income ~ . , family=binomial(logit), data=adult.train)
summary(log.model)
new.model <- step(log.model)
summary(new.model)
fitted.probabilities <- predict(new.model, adult.test, type='response')
fitted.results <- ifelse(fitted.probabilities>0.5, 1, 0)
misClassError <- mean(fitted.results != adult.test$income)
1-misClassError
table(adult.test$income, fitted.probabilities > 0.5)
1-misClassError
summary(log.model)
adult.test$predicted.income <- predict(new.model, adult.test, type='response')
table(adult.test$income, adult.test$predicted.income > 0.5)
misClassError <- mean(adult.test$predicted.income != adult.test$income)
1-misClassError
x <- table(adult.test$income, adult.test$predicted.income > 0.5)
str(x)
cm <- table(adult.test$income, adult.test$predicted.income > 0.5)
cm
cm[1,1]
cm[1,2]
cm[2,1]
cm[2,2]
sum(cm)
sum(cm[1,1] ,
cm[1,2] ,
cm[2,1],
cm[2,2])
sum(cm[2,1],
cm[2,2])
sum(cm[2,])
sum(cm[1,2], cm[2,2])
sum(cm[,2])
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
accuracy
error.rate
recall
precision
cm
6732/(6372+548)
6732/(6372+872)
6372/(6372+548)
6372/(6372+872)
head(adult)
str(adult)
train <- subset(adult, split==TRUE)
test <- subset(adult, split==FALSE)
str(train)
str(test)
model <- glm(income ~ . , family=binomial(logit), data=train)
summary(log.model)
summary(model)
new.step.model <- step(model)
summary(new.step.model)
test$predicted.income <- predict(model, test, type='response')
cm <- table(test$income, test$predicted.income > 0.5)
cm
cm[1,1] # TN
cm[1,2] # FP (Type 1)
cm[2,1] # FN (Type 2)
cm[2,2] # TP
accuracy <- (cm[1,1] + cm[2,2]) / sum(cm)
error.rate <-(cm[1,2] + cm[2,1]) / sum(cm)
recall <- cm[2,2] / sum(cm[2,])
precision <- cm[2,2] / sum(cm[,2])
accuracy
error.rate
recall
precision
install.packages('ISLR')
library(ISLR)
str(Caravan)
summary(Caravan$Purchase)
any(is.na(Caravan))
any(is.null(Caravan))
var(Caravan[,1])
var(Caravan[,2])
purchase <- Caravan$Purchase
standardized.Caravan <- scale(Caravan)
standardized.Caravan <- scale(Caravan[,-86])
var(standardized.Caravan[,1])
var(standardized.Caravan[,2])
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
library(class)
set.seed(101)
predicted.purchase <- knn(train.data, test.data, train.purchase, k=1)
head(predicted.purchase)
misclass.error <- mean(test.purchase != predicted.purchase)
misclass.error
predicted.purchase <- knn(train.data, test.data, train.purchase, k=3)
head(predicted.purchase)
misclass.error <- mean(test.purchase != predicted.purchase)
misclass.error
predicted.purchase <- knn(train.data, test.data, train.purchase, k=5)
head(predicted.purchase)
misclass.error <- mean(test.purchase != predicted.purchase)
misclass.error
predicted.purchase <- NULL
error.rate <- NULL
for(i in 1:20){
set.seed(101)
predicted.purchase <- knn(train.data, test.data, train.purchase, k=i)
error.rate[i] <- mean(test.purchase != predicted.purchase)
}
error.rate
library(ggplot2)
k.values <- 1:20
error.df <- data.frame(error.rate, k.values)
error.df
ggplot(error.df, aes(k.values, error.rate)) + geom_point() + geom_line(lty='dotted', col='red')
library(ISLR)
str(Caravan)
summary(Caravan$Purchase)
any(is.na(Caravan))
any(is.null(Caravan))
var(Caravan[,1])
var(Caravan[,2])
purchase <- Caravan$Purchase
standardized.Caravan <- scale(Caravan[,-86])
var(standardized.Caravan[,1])
var(standardized.Caravan[,2])
str(Caravan)
str(standardized.Caravan)
library(ISLR)
head(iris)
str(iris)
standardized.iris <- scale(iris)
standardized.iris <- scale(iris[,-5])
var(standardized.iris[,1])
var(standardized.iris[,2])
standardized.iris$Species <- iris$Species
str(standardized.iris)
standardized.iris <- scale(iris[,-5])
var(standardized.iris[,1])
var(standardized.iris[,2])
str(standardized.iris)
final.iris <- cbind(standardized.iris, iris$Species)
str(final.iris)
table(final.iris)
str(final.iris)
final.iris
head(final.iris)
library(ISLR)
head(iris)
str(iris)
standardized.iris <- scale(iris[,-5])
head(standardized.iris)
library(ISLR)
head(iris)
str(iris)
standardized.features <- scale(iris[,-5])
var(standardized.features[,1])
var(standardized.features[,2])
str(standardized.features)
head(standardized.features)
final.data <- cbind(standardized.features, iris$Species)
str(final.iris)
head(final.iris)
final.data <- cbind(standardized.features, iris[5])
str(final.iris)
head(final.iris)
final.data <- cbind(standardized.features, iris$Species)
str(final.iris)
head(final.iris)
final.data <- cbind(standardized.features, iris[5])
str(final.data)
head(final.data)
library(caTools)
set.seed(101)
split <- sample.split(iris$Species, SplitRatio = 0.7)
train <- subset(final.data, split==TRUE)
test <- subset(final.data, split==FALSE)
str(train)
str(test)
library(class)
predicted.species <- knn(train[1:4], test[1:4], train$Species, k=1)
head(predicted.species)
predicted.species
misclass.error <- mean(train$Species != predicted.species)
misclass.error
misclass.error <- mean(test$Species != predicted.species)
misclass.error
predicted.species <- NULL
error.rate <- NULL
for(i in 1:10){
set.seed(101)
predicted.species <- knn(train[1:4], test[1:4], train$Species, k=i)
error.rate[i] <- mean(test$Species != predicted.species)
}
error.rate
library(ggplot2)
k.values <- 1:10
error.df <- data.frame(error.rate, k.values)
error.df
ggplot(error.df, aes(k.values, error.rate)) + geom_point() + geom_line(lty='dotted', col='red')
