}
}
return(out)
}
fixed.fares <- impute_fare(df.test$Fare, df.test$Pclass)
df.test$Fare <- fixed.fares
missmap(df.test, main = 'Imputation Check', col=c('yellow', 'black'), legend = FALSE)
df.test <- select(df.test, -PassengerId, -Name, -Ticket, -Cabin)
str(df.test)
df.test$Pclass <- factor(df.test$Pclass)
df.test$Parch <- factor(df.test$Parch)
df.test$SibSp <- factor(df.test$SibSp)
str(df.test)
str(df.train)
df.train <- read.csv('titanic_train.csv')
sapply(df.train,function(x) sum(is.na(x)))
sapply(df.train, function(x) length(unique(x)))
library(Amelia) # good for finding how much data is missing
missmap(df.train, main='Missing Map', col=c('yellow',  'black'), legend=FALSE)
library(ggplot2)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill=factor(Pclass)))
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill=factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins=20, alpha=0.5, fill='blue')
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram(fill='green', col='black', alpha=0.5)
pl <- ggplot(df.train, aes(Pclass,Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
impute_age <- function(age, class) {
out <- age
for(i in 1:length(age)){
if(is.na(age[i])){
if(class[i] == 1){
out[i] <- 37 # these numbers came from the last graph
}else if(class[i] == 2){
out[i] <- 29 # these numbers came from the last graph
}else{
out[i] <- 24 # these numbers came from the last graph
}
}else{
out[i]  <- age[i]
}
}
return(out)
}
fixed.ages <- impute_age(df.train$Age, df.train$Pclass)
df.train$Age <- fixed.ages
missmap(df.train, main = 'Imputation Check', col=c('yellow', 'black'), legend = FALSE)
str(df.train)
library(dplyr)
df.train <- select(df.train, -PassengerId, -Name, -Ticket, -Cabin)
head(df.train)
str(df.train)
df.train$Survived <- factor(df.train$Survived)
df.train$Pclass <- factor(df.train$Pclass)
df.train$Parch <- factor(df.train$Parch)
df.train$SibSp <- factor(df.train$SibSp)
str(df.train)
log.model <- glm(Survived ~ . , family=binomial(link='logit'), data=df.train)
summary(log.model)
library(caTools)
set.seed(101)
split <- sample.split(df.train$Survived, SplitRatio = 0.7)
final.train <- subset(df.train, split==TRUE)
final.test <- subset(df.train, split==FALSE)
str(final.train)
str(final.test)
final.log.model <- glm(Survived ~ . , family=binomial(link='logit'), data=final.train)
summary(final.log.model)
fitted.probabilities <- predict(final.log.model, final.test, type='response')
fitted.results <- ifelse(fitted.probabilities>0.5, 1, 0)
misClassError <- mean(fitted.results != final.test$Survived)
1-misClassError
table(final.test$Survived, fitted.probabilities > 0.5)
df.test <- read.csv('titanic_test.csv')
sapply(df.test,function(x) sum(is.na(x)))
sapply(df.test, function(x) length(unique(x)))
missmap(df.test, main='Missing Map', col=c('yellow',  'black'), legend=FALSE)
pl <- ggplot(df.test, aes(Pclass,Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
impute_age <- function(age, class) {
out <- age
for(i in 1:length(age)){
if(is.na(age[i])){
if(class[i] == 1){
out[i] <- 42 # these numbers came from the last graph
}else if(class[i] == 2){
out[i] <- 27 # these numbers came from the last graph
}else{
out[i] <- 24 # these numbers came from the last graph
}
}else{
out[i]  <- age[i]
}
}
return(out)
}
fixed.ages <- impute_age(df.test$Age, df.test$Pclass)
df.test$Age <- fixed.ages
missmap(df.test, main = 'Imputation Check', col=c('yellow', 'black'), legend = FALSE)
ggplot(df.test, aes(Fare)) + geom_histogram(fill='green', col='black', alpha=0.5)
pl2 <- ggplot(df.test, aes(Pclass,Fare))
pl2 <- pl2 + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl2 + coord_cartesian(ylim=c(0,150)) + scale_y_continuous(breaks=seq(min(0), max(150), by=5)) + theme_bw()
impute_fare <- function(fare, class) {
out <- fare
for(i in 1:length(fare)){
if(is.na(fare[i])){
if(class[i] == 1){
out[i] <- 60 # these numbers came from the last graph
}else if(class[i] == 2){
out[i] <- 15 # these numbers came from the last graph
}else{
out[i] <- 8 # these numbers came from the last graph
}
}else{
out[i]  <- fare[i]
}
}
return(out)
}
fixed.fares <- impute_fare(df.test$Fare, df.test$Pclass)
df.test$Fare <- fixed.fares
missmap(df.test, main = 'Imputation Check', col=c('yellow', 'black'), legend = FALSE)
df.test <- select(df.test, -PassengerId, -Name, -Ticket, -Cabin)
str(df.test)
str(df.train)
df.test$Pclass <- factor(df.test$Pclass)
df.test$Parch <- factor(df.test$Parch)
df.test$SibSp <- factor(df.test$SibSp)
str(df.test)
str(df.train)
head(df.test$Parch)
df.test %>% filter(Parch==9)
df.test %>% filter(Parch<>9)
df.test %>% filter(Parch!=9)
new.df.test <- df.test %>% filter(Parch!=9)
str(df.test)
str(df.train)
str(new.df.test)
str(df.train)
log.model <- glm(Survived ~ . , family=binomial(link='logit'), data=df.train)
summary(log.model)
log.probabilities <- predict(log.model, new.df.test, type='response', se.fit=FALSE)
log.results <- ifelse(log.probabilities>0.5, 1, 0)
misClassError <- mean(log.results != new.df.test$Survived)
1-misClassError
new.df.test$Survived <- log.results
str(new.df.test)
new.df.test$Survived <- factor(new.df.test$Survived)
str(new.df.test)
winpath <- 'C:\Users\sgenn_000\Documents\GitHub\Udemy\Data Science and Machine Learning Bootcamp with R\Guides\Training Exercises\Machine Learning Projects\CSV files for ML Projects'
setwd("C:/Users/sgenn_000/Documents/GitHub/Udemy/Data Science and Machine Learning Bootcamp with R/Guides/Training Exercises/Machine Learning Projects/CSV files for ML Projects")
df <- read.csv('adult_sal.csv')
head(df)
library(dplyr)
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
str(adult)
library(plyr)
library(dplyr)
revalue(adult, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Married'))
table(adult$marital)
adult <- read.csv('adult_sal.csv')
adult <- select(adult, -X)
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$marital)
table(adult$country)
levels(adult$country)
list(levels(adult$country))
levels(adult$country)
paste(levels(adult$country), sep='"="')
typeof(levels(adult$country))
paste(levels(adult$country), sep='"="', collapse=',')
paste(levels(adult$country), collapse=',')
paste(levels(adult$country), collapse='"="')
cat(paste(levels(adult$country), collapse='"="'))
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="North.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
summary(adult)
table(adult$type_employer)
str(adult)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$country)
table(adult$marital)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="North.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="Latin.and.South.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$marital)
table(adult$country)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="Latin.and.South.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
str(adult)
levels(adult$type_employer)
levels(marital)
levels(adult$marital)
levels(adult$country)
library(Amelia)
str(adult)
table(age)
table(adult$age)
table(adult)
table(adult$type_employer)
adult %>% filter(type_employer=='?')
adult %>% filter(type_employer==' ?')
adult[adult$type_employer=='?', ] <- NA
table(adult$type_employer)
adult %>% filter(type_employer=='?')
adult %>% filter(is.na(type_employer))
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
sum(is.null(adult$type_employer))
sum(is.na(adult$type_employer))
sapply(adult,function(x) sum(is.na(x)))
sapply(adult,function(x) sum(is.null(x)))
adult$type_employer <- revalue(adult$type_employer, c('Never-worked'='Unemployed', 'Without-pay'='Unemployed'))
table(adult$type_employer)
adult$type_employer <- revalue(adult$type_employer, c('Local-gov'='SL-gov', 'State-gov'='SL-gov', 'Self-emp-inc'='self-emp', 'Self-emp-not-inc'='self-emp'))
table(adult$type_employer)
table(adult$marital)
adult$marital <- revalue(adult$marital, c('Divorced'='Not-Married', 'Widowed'='Not-Married', 'Married-spouse-absent'='Married', 'Married-AF-spouse'='Married', 'Married-civ-spouse'='Married', 'Separated'='Not-Married'))
table(adult$country)
table(adult$marital)
levels(adult$country)
cat(paste(levels(adult$country), collapse='"="", "'))
adult$country <- revalue(adult$country, c(
"?"="Other",
"Cambodia"="Asia",
"Canada"="North.America",
"China"="Asia",
"Columbia"="Latin.and.South.America",
"Cuba"="Latin.and.South.America",
"Dominican-Republic"="Latin.and.South.America",
"Ecuador"="Latin.and.South.America",
"El-Salvador"="Latin.and.South.America",
"England"="Europe",
"France"="Europe",
"Germany"="Europe",
"Greece"="Europe",
"Guatemala"="Latin.and.South.America",
"Haiti"="Latin.and.South.America",
"Holand-Netherlands"="Europe",
"Honduras"="Latin.and.South.America",
"Hong"="Asia",
"Hungary"="Europe",
"India"="Asia",
"Iran"="Asia",
"Ireland"="Europe",
"Italy"="Europe",
"Jamaica"="Latin.and.South.America",
"Japan"="Asia",
"Laos"="Asia",
"Mexico"="Latin.and.South.America",
"Nicaragua"="Latin.and.South.America",
"Outlying-US(Guam-USVI-etc)"="Latin.and.South.America",
"Peru"="Latin.and.South.America",
"Philippines"="Asia",
"Poland"="Europe",
"Portugal"="Europe",
"Puerto-Rico"="North.America",
"Scotland"="Europe",
"South"="Other",
"Taiwan"="Asia",
"Thailand"="Asia",
"Trinadad&Tobago"="Latin.and.South.America",
"United-States"="North.America",
"Vietnam"="Asia",
"Yugoslavia"="Europe"))
table(adult$country)
str(adult)
levels(adult$type_employer)
levels(adult$marital)
levels(adult$country)
library(Amelia)
table(adult$age)
table(adult$type_employer)
adult %>% filter(type_employer=='?')
adult[adult$type_employer=='?', 'type_employer'] <- NA
adult %>% filter(is.na(type_employer))
table(adult$type_employer)
str(adult)
table(adult$fnlwgt)
sapply(adult,function(x) sum(x=='?'))
table(adult$occupation)
adult %>% filter(occupation=='?')
adult[adult$occupation=='?', 'occupation'] <- NA
adult %>% filter(is.na(occupation)) # verification
table(adult$occupation)
missmap(adult, main='Missing Map', col=c('yellow',  'black'), legend=FALSE)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
test <- na.omit(adult)
missmap(test, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
adult <- na.omit(adult)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
str(adult)
adult$type_employer <- factor(adult$type_employer)
str(adult)
adult$type_employer <- factor(adult$type_employer)
adult$occupation <- factor(adult$occupation)
str(adult)
library(ggplot2)
ggplot(adult, aes(age)) + geom_histogram(aes(fill=factor(income)))
ggplot(adult, aes(age)) + geom_histogram(aes(col='black', fill=factor(income)))
ggplot(adult, aes(age)) + geom_histogram(fill=factor(income), col='black', alpha=0.5)
ggplot(adult, aes(age)) + geom_histogram(aes(fill=factor(income)), col='black', alpha=0.5)
ggplot(adult, aes(age)) + geom_histogram(aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=100, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=50, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=75, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=75, aes(fill=factor(income)), col='black', position_stack())
ggplot(adult, aes(age)) + geom_histogram(bins=75, aes(fill=factor(income)), col='black', position=position_stack())
ggplot(adult, aes(age)) + geom_histogram(bins=80, aes(fill=factor(income)), col='black', position=position_stack())
ggplot(adult, aes(age)) + geom_histogram(bins=80, aes(fill=factor(income)), col='black', position=position_fill())
ggplot(adult, aes(age)) + geom_histogram(bins=75, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=80, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=85, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=60, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=65, aes(fill=factor(income)), col='black')
ggplot(adult, aes(age)) + geom_histogram(bins=70, aes(fill=factor(income)), col='black')
